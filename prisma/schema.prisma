// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(uuid())
  name      String
  email     String    @unique
  password  String
  accounts  Account[]
  tasks     Task[]
  projects  Project[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  isVerified Boolean  @default(false)
}

model Account {
  id          String    @id @default(uuid())
  userId      String
  provider    String
  providerId  String    @unique
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Task {
  id          String    @id @default(uuid())
  title       String
  description String?
  status      String    @default("pending")
  priority    Int       @default(1)
  userId      String
  projectId   String?
  user        User      @relation(fields: [userId], references: [id])
  project     Project?  @relation(fields: [projectId], references: [id])
  labels      TaskLabel[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Project {
  id          String    @id @default(uuid())
  name        String
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  tasks       Task[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Label {
  id         String     @id @default(uuid())
  name       String
  tasks      TaskLabel[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model TaskLabel {
  taskId   String
  labelId  String
  task     Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)
  label    Label  @relation(fields: [labelId], references: [id], onDelete: Cascade)

  @@id([taskId, labelId]) // Composite primary key
}